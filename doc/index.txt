
Programowanie w C++ dla systemów czasu rzeczywistego bazujących na jądrze Linuksa, część pierwsza
*************************************************************************************************

* Wprowadzenie do systemów czasu rzeczywistego
  * System operacyjny czasu rzeczywistego
  * Praktyczny podział systemów czasu rzeczywistego
  * Wymagania dla systemów czasu rzeczywistego
    * Opóźnienie - *latency*
* Linux Kernel
  * Linux jako system operacyjny czasu rzeczywistego
  * Kernel preemption
    * RT-Preempt Patch
    * Ćwiczenie - patchowanie i aktualizacja jądra debiana
  * Real-Time Schedulers
    * Cycletest
    * Inwersja priorytetów - *priority inversion*
* Podstawowe usługi systemowe
  * Informacje z drzewa "/proc"
    * Ovecommiting
  * Informacje z drzewa "/sys"
    * Kobject
  * Węzły urządzeń - "/dev"
    * Urządzenia znakowe - *character devices*
    * Urządzenia blokowe - *block devices*
* Procesy i interakcja procesów
  * Procesy
    * Model procesu Linux
    * Atrybuty procesów
    * Argumenty programu
    * Tworzenie procesów potomnych
    * Exec
    * Czekając na proces
      * Wywołanie systemowe "clone"
  * Prymitywne sposoby komunikacji między procesami
    * Pliki blokujący
    * Blokowanie plików
  * Sygnały
    * Nazwy sygnałów
    * Obsługa sygnałów
    * Zestawy sygnałów
      * Ustalanie działania sygnału
    * Sygnały a funkcje systemowe
    * Blokowanie sygnałów
    * Wysyłanie sygnałów
    * Wysyłanie sygnałów do siebie
    * Funkcja systemowa "pause"
  * Komunikacja za pomocą potoków
    * Nieblokujące odczyty i zapisy
      * Obsługa wielu potoków
      * Funkcja exec i potoki
    * Potoki nazwane = pliki FIFO
* System V IPC
  * Czym jest IPC
  * System V
  * Identyfikatory IPC
  * Klucze IPC
    * ipc_perm
  * Kolejki komunikatów
    * Tworzenie kolejki komunikatów
    * Używanie kolejki komunikatów
  * Semafory
  * Pamięć wspólna